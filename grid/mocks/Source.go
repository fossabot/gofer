// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mocks

import (
	cache "github.com/patrickascher/gofer/cache"
	grid "github.com/patrickascher/gofer/grid"
	condition "github.com/patrickascher/gofer/query/condition"
	mock "github.com/stretchr/testify/mock"
)

// Source is an autogenerated mock type for the Source type
type Source struct {
	mock.Mock
}

// All provides a mock function with given fields: _a0, _a1
func (_m *Source) All(_a0 condition.Condition, _a1 grid.Grid) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(condition.Condition, grid.Grid) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(condition.Condition, grid.Grid) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache provides a mock function with given fields:
func (_m *Source) Cache() cache.Manager {
	ret := _m.Called()

	var r0 cache.Manager
	if rf, ok := ret.Get(0).(func() cache.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Manager)
		}
	}

	return r0
}

// Callback provides a mock function with given fields: _a0, _a1
func (_m *Source) Callback(_a0 string, _a1 grid.Grid) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, grid.Grid) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, grid.Grid) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Count provides a mock function with given fields: _a0, _a1
func (_m *Source) Count(_a0 condition.Condition, _a1 grid.Grid) (int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int
	if rf, ok := ret.Get(0).(func(condition.Condition, grid.Grid) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(condition.Condition, grid.Grid) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0
func (_m *Source) Create(_a0 grid.Grid) (interface{}, error) {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(grid.Grid) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(grid.Grid) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *Source) Delete(_a0 condition.Condition, _a1 grid.Grid) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(condition.Condition, grid.Grid) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fields provides a mock function with given fields: _a0
func (_m *Source) Fields(_a0 grid.Grid) ([]grid.Field, error) {
	ret := _m.Called(_a0)

	var r0 []grid.Field
	if rf, ok := ret.Get(0).(func(grid.Grid) []grid.Field); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]grid.Field)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(grid.Grid) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// First provides a mock function with given fields: _a0, _a1
func (_m *Source) First(_a0 condition.Condition, _a1 grid.Grid) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(condition.Condition, grid.Grid) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(condition.Condition, grid.Grid) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: _a0
func (_m *Source) Init(_a0 grid.Grid) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(grid.Grid) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Interface provides a mock function with given fields:
func (_m *Source) Interface() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// PreInit provides a mock function with given fields: _a0
func (_m *Source) PreInit(_a0 grid.Grid) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(grid.Grid) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *Source) Update(_a0 grid.Grid) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(grid.Grid) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatedFields provides a mock function with given fields: _a0
func (_m *Source) UpdatedFields(_a0 grid.Grid) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(grid.Grid) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
