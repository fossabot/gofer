// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mocks

import (
	logger "github.com/patrickascher/gofer/logger"
	condition "github.com/patrickascher/gofer/query/condition"

	mock "github.com/stretchr/testify/mock"

	query "github.com/patrickascher/gofer/query"

	sql "database/sql"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

// All provides a mock function with given fields: _a0, _a1
func (_m *Provider) All(_a0 string, _a1 []interface{}) (*sql.Rows, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sql.Rows
	if rf, ok := ret.Get(0).(func(string, []interface{}) *sql.Rows); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with given fields:
func (_m *Provider) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Config provides a mock function with given fields:
func (_m *Provider) Config() query.Config {
	ret := _m.Called()

	var r0 query.Config
	if rf, ok := ret.Get(0).(func() query.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(query.Config)
	}

	return r0
}

// DB provides a mock function with given fields:
func (_m *Provider) DB() *sql.DB {
	ret := _m.Called()

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *Provider) Delete(_a0 string) query.Delete {
	ret := _m.Called(_a0)

	var r0 query.Delete
	if rf, ok := ret.Get(0).(func(string) query.Delete); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(query.Delete)
		}
	}

	return r0
}

// Exec provides a mock function with given fields: _a0, _a1
func (_m *Provider) Exec(_a0 []string, _a1 [][]interface{}) ([]sql.Result, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []sql.Result
	if rf, ok := ret.Get(0).(func([]string, [][]interface{}) []sql.Result); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, [][]interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// First provides a mock function with given fields: _a0, _a1
func (_m *Provider) First(_a0 string, _a1 []interface{}) (*sql.Row, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sql.Row
	if rf, ok := ret.Get(0).(func(string, []interface{}) *sql.Row); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasTx provides a mock function with given fields:
func (_m *Provider) HasTx() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Information provides a mock function with given fields: _a0
func (_m *Provider) Information(_a0 string) query.Information {
	ret := _m.Called(_a0)

	var r0 query.Information
	if rf, ok := ret.Get(0).(func(string) query.Information); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(query.Information)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: _a0
func (_m *Provider) Insert(_a0 string) query.Insert {
	ret := _m.Called(_a0)

	var r0 query.Insert
	if rf, ok := ret.Get(0).(func(string) query.Insert); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(query.Insert)
		}
	}

	return r0
}

// Open provides a mock function with given fields:
func (_m *Provider) Open() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Placeholder provides a mock function with given fields:
func (_m *Provider) Placeholder() condition.Placeholder {
	ret := _m.Called()

	var r0 condition.Placeholder
	if rf, ok := ret.Get(0).(func() condition.Placeholder); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(condition.Placeholder)
	}

	return r0
}

// Query provides a mock function with given fields:
func (_m *Provider) Query() query.Query {
	ret := _m.Called()

	var r0 query.Query
	if rf, ok := ret.Get(0).(func() query.Query); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(query.Query)
		}
	}

	return r0
}

// QuoteIdentifier provides a mock function with given fields: _a0
func (_m *Provider) QuoteIdentifier(_a0 ...string) string {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(...string) string); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// QuoteIdentifierChar provides a mock function with given fields:
func (_m *Provider) QuoteIdentifierChar() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Rollback provides a mock function with given fields:
func (_m *Provider) Rollback() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: _a0
func (_m *Provider) Select(_a0 string) query.Select {
	ret := _m.Called(_a0)

	var r0 query.Select
	if rf, ok := ret.Get(0).(func(string) query.Select); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(query.Select)
		}
	}

	return r0
}

// SetLogger provides a mock function with given fields: _a0
func (_m *Provider) SetLogger(_a0 logger.Manager) {
	_m.Called(_a0)
}

// Tx provides a mock function with given fields:
func (_m *Provider) Tx() (query.Tx, error) {
	ret := _m.Called()

	var r0 query.Tx
	if rf, ok := ret.Get(0).(func() query.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(query.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *Provider) Update(_a0 string) query.Update {
	ret := _m.Called(_a0)

	var r0 query.Update
	if rf, ok := ret.Get(0).(func(string) query.Update); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(query.Update)
		}
	}

	return r0
}
