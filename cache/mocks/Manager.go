// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mocks

import (
	cache "github.com/patrickascher/gofer/cache"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// All provides a mock function with given fields:
func (_m *Manager) All() ([]cache.Item, error) {
	ret := _m.Called()

	var r0 []cache.Item
	if rf, ok := ret.Get(0).(func() []cache.Item); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cache.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: prefix, name
func (_m *Manager) Delete(prefix string, name string) error {
	ret := _m.Called(prefix, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(prefix, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAll provides a mock function with given fields:
func (_m *Manager) DeleteAll() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePrefix provides a mock function with given fields: prefix
func (_m *Manager) DeletePrefix(prefix string) error {
	ret := _m.Called(prefix)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(prefix)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exist provides a mock function with given fields: prefix, name
func (_m *Manager) Exist(prefix string, name string) bool {
	ret := _m.Called(prefix, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(prefix, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: prefix, name
func (_m *Manager) Get(prefix string, name string) (cache.Item, error) {
	ret := _m.Called(prefix, name)

	var r0 cache.Item
	if rf, ok := ret.Get(0).(func(string, string) cache.Item); ok {
		r0 = rf(prefix, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(prefix, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HitCount provides a mock function with given fields: prefix, name
func (_m *Manager) HitCount(prefix string, name string) int {
	ret := _m.Called(prefix, name)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(prefix, name)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MissCount provides a mock function with given fields: prefix, name
func (_m *Manager) MissCount(prefix string, name string) int {
	ret := _m.Called(prefix, name)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(prefix, name)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Prefix provides a mock function with given fields: prefix
func (_m *Manager) Prefix(prefix string) ([]cache.Item, error) {
	ret := _m.Called(prefix)

	var r0 []cache.Item
	if rf, ok := ret.Get(0).(func(string) []cache.Item); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cache.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: prefix, name, value, exp
func (_m *Manager) Set(prefix string, name string, value interface{}, exp time.Duration) error {
	ret := _m.Called(prefix, name, value, exp)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}, time.Duration) error); ok {
		r0 = rf(prefix, name, value, exp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDefaultExpiration provides a mock function with given fields: duration
func (_m *Manager) SetDefaultExpiration(duration time.Duration) {
	_m.Called(duration)
}

// SetDefaultPrefix provides a mock function with given fields: _a0
func (_m *Manager) SetDefaultPrefix(_a0 string) {
	_m.Called(_a0)
}
