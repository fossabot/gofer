// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mocks

import (
	logger "github.com/patrickascher/gofer/logger"
	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// Debug provides a mock function with given fields: _a0
func (_m *Manager) Debug(_a0 string) {
	_m.Called(_a0)
}

// Error provides a mock function with given fields: msg
func (_m *Manager) Error(msg string) {
	_m.Called(msg)
}

// Info provides a mock function with given fields: msg
func (_m *Manager) Info(msg string) {
	_m.Called(msg)
}

// New provides a mock function with given fields:
func (_m *Manager) New() logger.Manager {
	ret := _m.Called()

	var r0 logger.Manager
	if rf, ok := ret.Get(0).(func() logger.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Manager)
		}
	}

	return r0
}

// Panic provides a mock function with given fields: msg
func (_m *Manager) Panic(msg string) {
	_m.Called(msg)
}

// SetCallerFields provides a mock function with given fields: _a0
func (_m *Manager) SetCallerFields(_a0 bool) {
	_m.Called(_a0)
}

// SetLogLevel provides a mock function with given fields: _a0
func (_m *Manager) SetLogLevel(_a0 logger.Level) {
	_m.Called(_a0)
}

// Trace provides a mock function with given fields: _a0
func (_m *Manager) Trace(_a0 string) {
	_m.Called(_a0)
}

// Warning provides a mock function with given fields: msg
func (_m *Manager) Warning(msg string) {
	_m.Called(msg)
}

// WithFields provides a mock function with given fields: _a0
func (_m *Manager) WithFields(_a0 logger.Fields) logger.Manager {
	ret := _m.Called(_a0)

	var r0 logger.Manager
	if rf, ok := ret.Get(0).(func(logger.Fields) logger.Manager); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Manager)
		}
	}

	return r0
}

// WithTimer provides a mock function with given fields:
func (_m *Manager) WithTimer() logger.Manager {
	ret := _m.Called()

	var r0 logger.Manager
	if rf, ok := ret.Get(0).(func() logger.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Manager)
		}
	}

	return r0
}
